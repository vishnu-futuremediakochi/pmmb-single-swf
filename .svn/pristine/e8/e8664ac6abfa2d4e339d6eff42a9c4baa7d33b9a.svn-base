package {
	import flash.display.MovieClip;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.geom.Point;
	import flash.geom.Rectangle;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.media.SoundTransform;
	import flash.text.TextField;
	import flash.utils.Timer;
    
	
    public class Main extends MovieClip 
	{
        public var bike:*;
		public var smoke:Smoke;
		
		
		public var obstacle_mc:MovieClip;
		public var parkingspot:MovieClip;
		public var bikeposArray:Array;
		public var bikeRotArray:Array;
		public var levelNameArray:Array;
		public var currentLevel:int = 0;
		
		private var gamepaused:Boolean = false;
		private var pausetimer:int = 0;
		private var playmc:MovieClip;
		private var bikemaxspeed:int = 0;
		private var congratsmc:MovieClip;
		private var hudmc:MovieClip;
		private var txtCurrentLevelName:TextField;
		private var txtRemTime:TextField;
		private var timeElapsed:Number=0;
		private var timeRemaining:Number;
		private var gameTimer:Timer = new Timer(1000);
		private var containermc:MovieClip;
		private var skiplevel_mc:MovieClip;
		private var movingobstacle_mc:MovieClip;
		private var rbEngineRunning:Sound = new RBEngineRunning();
		private var rbEngineStarting:Sound = new RBEngineStarting();
		private var rbCrashing:Sound = new RBCrashing();
		private var rbClapping:Sound = new RBClapping();
		private var rbEngineHigh:Sound = new RBEngineHigh();
		private var restartTimer:Timer;
		private var restartTimer2:Timer;
		private var hasBikeStarted:Boolean = false;
		private var soundchannel:SoundChannel = new SoundChannel();
		private var soundchannel2:SoundChannel = new SoundChannel();
		private var crashedSoundChannel:SoundChannel = new SoundChannel();
		private var clappingSoundChannel:SoundChannel = new SoundChannel();
		
		private var isEngineSoundHigh:Boolean = false;
		private var isThrottleReleased:Boolean = false;
		
		private var lifesRemaining:int = 5;
		private var isSoundOn:Boolean = true;
        public function Main():void 
		{
			bikeposArray = new Array(new Point(670, 100), new Point(630, 510),new Point(550,120),new Point(100,120),new Point(700,400),new Point(700,80),new Point(700,200),new Point(200,400),new Point(530,160),new Point(260,500), new Point(222,258),new Point(300,357),new Point(550,300), new Point(375,415),new Point(620,343));
			bikeRotArray = new Array(180, 0,90,180,0, 270,270,0,180,90,180,25,0,0,270);
			levelNameArray =  new Array("level1", "level2", "level3","level4","level5","level6","level7","level8","level9","level10","level11","level12","level13","level14","level15");
            gamepaused = true;
			
			
        }
		function init()
		{
			
			playmc = getChildByName("play_btn") as MovieClip;
			playmc.addEventListener(MouseEvent.CLICK, mcPlayClickedListener);
			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpListener);
			
			
			
		}
		function changeBike(nextLevelName:String)
		{
			bike.bikepaused = false;
			
			switch(nextLevelName)
			{
				
				case "level1":
							bikePos = new Point();
							bikePos = bikeposArray[0];							
							bike = new Bike(670, 100);
							addChild(bike);
							bike.rotation = 180;
				
				case "level2":
							bike.parent.removeChild(bike);
							bike = new Bike2(630, 510);
							addChild(bike);
							bike.rotation = 0;
							break;
				case "level3":
							bike.parent.removeChild(bike);
							bike = new Bike3(550, 120);
							addChild(bike);
							bike.rotation = 90;
							break;
				case "level4":
							bike.parent.removeChild(bike);
							bike = new Bike2(100, 120);
							addChild(bike);
							bike.rotation = 180;
							break;
				case "level5":
							bike.parent.removeChild(bike);
							bike = new Bike(700, 400);
							addChild(bike);
							bike.rotation = 0;
							break;
				case "level6":
							bike.parent.removeChild(bike);
							bike = new Bike6(700, 80);
							addChild(bike);
							bike.rotation = 270;
							break;
				case "level7":
							bike.parent.removeChild(bike);
							bike = new Bike7(700, 200);
							addChild(bike);
							bike.rotation = 270;
							break;
				case "level8":
							bike.parent.removeChild(bike);
							bike = new Bike8(200, 400);
							addChild(bike);
							bike.rotation = 0;
							break;
				case "level9":
							bike.parent.removeChild(bike);
							bike = new Bike7(530, 160);
							addChild(bike);
							bike.rotation = 180;
							break;
				case "level10":
							bike.parent.removeChild(bike);
							bike = new Bike8(260, 500);
							addChild(bike);
							bike.rotation = 90;
							break;
							
				case "level11":
							bike.parent.removeChild(bike);
							bike = new Bike9(222, 258);
							addChild(bike);
							bike.rotation = 180;
							break;
				case "level12":
							bike.parent.removeChild(bike);
							var bikePos:Point = bikeposArray[11 ];
							bike.changePos(bikePos.x, bikePos.y);
							bike = new Bike(bikePos.x, bikePos.y);
							addChild(bike);
							bike.rotation =  bikeRotArray[11]
							break;
				case "level13":
							bike.parent.removeChild(bike);
							var bikePos:Point = bikeposArray[12];
							bike = new Bike13(bikePos.x, bikePos.y);
							addChild(bike);
							bike.rotation = bikeRotArray[12];
							break;
				case "level14":
							bike.parent.removeChild(bike);
							var bikePos:Point = bikeposArray[13];
							bike = new Bike9(bikePos.x, bikePos.y);
							addChild(bike);
							bike.rotation = bikeRotArray[13];
							break;
							
				case "level15": 
							bike.parent.removeChild(bike);
							var bikePos:Point = bikeposArray[14];
							bike = new Bike13(bikePos.x, bikePos.y);
							addChild(bike);
							bike.rotation = bikeRotArray[14];
							break;
							
							
							
							
			}
			bike.accelerate = false;
			
		}
		function keyUpListener(evt:KeyboardEvent)
		{
			if (evt.keyCode == 83)
			{
				/* code happening when congrats occurs*/
				gamepaused = false;
				//bike.max_speed = bikemaxspeed;
				var nextLevelName:String = levelNameArray[currentLevel + 1];
				this.gotoAndStop(nextLevelName);
				//this is where the new bike should be initialized//
				changeBike(nextLevelName);
				///////////////////////////////////////////////////
				
			//	var bikePos:Point = bikeposArray[currentLevel + 1];
			//	bike.changePos(bikePos.x, bikePos.y);
			//	bike.rotation = bikeRotArray[currentLevel + 1];
				currentLevel++;
				txtRemTime.text = "5:00" ;
				gameTimer.start();
				timeElapsed = 0;
				//bike.bikepaused = false;
				if (currentLevel >= 4)
				{
					this["levelmc"]["initX"] = this["levelmc"].x;
					this["levelmc"]["initY"] = this["levelmc"].y;	
				}
				
				
				/*/////////////////////////////////////////*/
			}
		}
		function mcPlayClickedListener(evt:MouseEvent)
		{
			
			this.gotoAndStop(11);//level 1
			//here the level 1 bike is initialized
			bike = new Bike(670,100);			
			addChild(bike);
			smoke = new Smoke();
			addChild(smoke);
			soundchannel = rbEngineStarting.play();
			soundchannel.addEventListener(Event.SOUND_COMPLETE, onEngineStartedSoundPlayed);
		
			////////////////////////////////////
			bike.rotation = 180;
			obstacle_mc = getChildByName("obstacle") as MovieClip;
			parkingspot = getChildByName("parkingspot") as MovieClip;
			this.addEventListener(Event.ENTER_FRAME, enter_frame);
			gamepaused = false;
			gameTimer.addEventListener(TimerEvent.TIMER, gameTimeCounter);
			gameTimer.start();
			timeElapsed = 0;
			hudmc = getChildByName("hud_mc") as MovieClip;
			var mcAudio:MovieClip = hudmc.getChildByName("audio_mc") as MovieClip;
			mcAudio.addEventListener(MouseEvent.CLICK, audioToggleListener);	
		
			
		}
		function onEngineStartedSoundPlayed(evt:Event)
		{
			hasBikeStarted = true;	
			//	gamepaused = false;
		}
		
		
		
	
		
		function gameTimeCounter(evt:TimerEvent)
		{
			++timeElapsed;
			timeRemaining = 5 * 60 - timeElapsed;
			var m = int(timeRemaining / 60);
			var s = int(timeRemaining % 60);
			
			txtRemTime = hudmc.getChildByName("txtRemainingTime") as TextField;
			var min:String = "";
			var sec:String = "";
			if (s < 10)
			{
				sec = "0" + s;
			}
			else
			{
				sec = "" + s;
			}
			if (m < 10)
			{
				min = "0" + m;
			}
			else 
			{
				min = "" + m;
			}
			txtRemTime.text = "" + min + ":" + sec;
			
		}
		function audioToggleListener(evt:MouseEvent)
		{
			
			var mcAudio:MovieClip = hudmc.getChildByName("audio_mc") as MovieClip;

			if (mcAudio.currentFrame == 1)
			{
				mcAudio.gotoAndStop(2);
			}
			else
			{
				mcAudio.gotoAndStop(1);
			}
			
			if (isSoundOn == true)
			{
				isSoundOn = false;
			}
			else
			{
				isSoundOn = true;
			}
		}
		
		function enter_frame(evt:Event)
		{
			
			if (!gamepaused)
			{
			
				obstacle_mc = this["levelmc"].getChildByName("obstacle") as MovieClip;
				
				if (obstacle_mc)
				{
					movingobstacle_mc = obstacle_mc.getChildByName("movingobstacle1") as MovieClip;
				}
				parkingspot = this["levelmc"].getChildByName("parkingspot") as MovieClip;
				bike.parent.setChildIndex(bike, bike.parent.numChildren - 1);
				crashed_mc = getChildByName("crashed_mc") as MovieClip;
				crashed_mc.parent.setChildIndex(crashed_mc, crashed_mc.parent.numChildren - 1);
				congratsmc = getChildByName("congrats_mc") as MovieClip;
				congratsmc.parent.setChildIndex(congratsmc, congratsmc.parent.numChildren - 1);
				
				hudmc = getChildByName("hud_mc") as MovieClip;
				if (hudmc)
				{
					skiplevel_mc = hudmc.getChildByName("skiplevel") as MovieClip;
					
					hudmc.parent.setChildIndex(hudmc, hudmc.parent.numChildren - 1);
					txtCurrentLevelName = hudmc.getChildByName("txtCurrentLevel") as TextField;
					txtCurrentLevelName.text = "" + (currentLevel + 1);	
					var mcLife:MovieClip = hudmc.getChildByName("life") as MovieClip;
					mcLife.gotoAndStop(lifesRemaining);
					
					
				}
				if (bike.accelerate == true)
				{
				
					var exhaust:MovieClip = bike.getChildByName("ex") as MovieClip;
					var smokepoint:Point = new Point();
					
					
					smokepoint = bike.localToGlobal(new Point(exhaust.x, exhaust.y));
				
					smoke.x = smokepoint.x;
					smoke.y = smokepoint.y;
					
					smoke.parent.setChildIndex(smoke, smoke.parent.numChildren - 1);
					smoke.rotation = bike.rotation;
					smoke.gotoAndStop(2);
					
				}
				else
				{
					smoke.gotoAndStop(1);
				}
				
				
				
				if (hasBikeStarted == true)
				{
					
					if (bike.accelerate == true )
					{
						
						/*throttle has been pressed
						 * if the engine high sound is not yet started, start it
						 */
						stopEngineRunningSound();
						if (isEngineSoundHigh == false)//engine not yet started
						{
							playEngineHighSound(null);
							isEngineSoundHigh = true;
							isThrottleReleased = false;
						}
					}
					else
					{
						
						
						
						/*the throttle is released
						 * so, the engine running sound should be played.
						 */
						isEngineSoundHigh = false;
						stopEngineHighSound();
						if (isThrottleReleased == false)
						{
						
							
							playEngineRunningSound(null);
							isThrottleReleased = true;
						}
						
					}
				}
				/* sound override*/
				if (isSoundOn == false)
				{
					stopEngineHighSound();
					stopEngineRunningSound();
				}
				
				/******************/
				
				if (currentLevel >= 4 )//currentLevel starts with 0
				{
					
					if (bike.y < 50 )
					{
						
						this["levelmc"].y += 500;
						bike.y = 550;
					}
					else if ( bike.y > 550)
					{
						this["levelmc"].y -= 500;						
						bike.y = 50;
					}
					
					if (bike.x < 50)
					{
						this["levelmc"].x += 700;
						bike.x = 750;
					}
					else if(bike.x>750)
					{
						this["levelmc"].x -= 700;
						bike.x = 50;
					}
					
				}
		
				
				if ( PixelPerfectCollisionDetection.isColliding(bike, obstacle_mc, obstacle_mc.parent, true))
				{
					
					
					movingobstacle_mc = obstacle_mc.getChildByName("movingobstacle1") as MovieClip;
					if (movingobstacle_mc)
					{
						movingobstacle_mc.stop();
					}
					var movingobstacle2 = obstacle_mc.getChildByName("movingobstacle2") as MovieClip;
					if (movingobstacle2)
					{
						movingobstacle2.stop();
					}
					var movingobstacle_mc3 = obstacle_mc.getChildByName("movingobstacle3") as MovieClip;
					if (movingobstacle_mc3)
					{
						movingobstacle_mc3.stop();
					}
					var movingobstacle4 = obstacle_mc.getChildByName("movingobstacle4") as MovieClip;
					if (movingobstacle4)
					{
						movingobstacle4.stop();
					}
					
					
					bike.speed = 0;
					crashed_mc.gotoAndPlay(2);
					bike.bikepaused = true;
					gamepaused = true;
					bikemaxspeed = bike.max_speed;
					bike.max_speed = 0;
					gameTimer.stop();
					smoke.gotoAndStop(1);
					
					hasBikeStarted = false;
					
					
					stopEngineHighSound();
					stopEngineRunningSound();
					lifesRemaining--;
					
					//bike["smoke"].visible = false;
					if (rbCrashing && crashedSoundChannel)
					{
						crashedSoundChannel = rbCrashing.play();	
					}
					
					
				}
				//else used to make sure collision and parking does not happen at the same instant
				else if ( PixelPerfectCollisionDetection.isColliding(bike, parkingspot, parkingspot.parent, true))
				{
					
					if (
						(PixelPerfectCollisionDetection.isColliding(bike["front1"], parkingspot, parkingspot.parent, true) )
					&&	(PixelPerfectCollisionDetection.isColliding(bike["front2"], parkingspot, parkingspot.parent, true) )
					&& (PixelPerfectCollisionDetection.isColliding(bike["rear1"], parkingspot, parkingspot.parent, true))
					&& (PixelPerfectCollisionDetection.isColliding(bike["rear2"], parkingspot, parkingspot.parent, true))					
					&& (bike.speed == 0)
					)
					{
										
						gamepaused = true;						
						congratsmc.gotoAndPlay(2);
						bikemaxspeed = bike.max_speed;
						bike.max_speed = 0;
						gameTimer.stop();
						bike.bikepaused = true;
						smoke.gotoAndStop(1);
						soundchannel.stop();
						
						
						hasBikeStarted = false;
						
						stopEngineHighSound();
						stopEngineRunningSound();
						bike.accelerate = false;
						isThrottleReleased = false;
						
						if (rbClapping && clappingSoundChannel)
						{
							clappingSoundChannel = rbClapping.play();	
						}
						trace('rbClapping:' + rbClapping);
						trace('clappingSoundChannel:' + clappingSoundChannel);
						
					}
				}
				
				
			}
			else
			{
				//game is paused
				
				if (crashed_mc.currentFrame == crashed_mc.totalFrames - 1)
				{					
					if (lifesRemaining == 0)
					{
						
						bike.parent.removeChild(bike);
						hud_mc.visible = false;
						gameover_mc.x = 0;
						gameover_mc.y = 0;
						var replaybutton:MovieClip = gameover_mc.getChildByName("replay_mc") as MovieClip;
						stage.addEventListener(KeyboardEvent.KEY_UP, spacekeyUpListener);
						
					}
					else
					{
						
						var bikePos:Point = bikeposArray[currentLevel ];
						bike.changePos(bikePos.x, bikePos.y);
						bike.rotation = bikeRotArray[currentLevel ];
						bike["head"] .rotation = 0;
						bike.max_speed = bikemaxspeed;
						bike.bikepaused = false;
						txtRemTime.text = "5:00" ;
						gameTimer.start();
						timeElapsed = 0;
					//	bike["smoke"].visible = true;
						if (currentLevel >= 4)
						{
							this["levelmc"].x = this["levelmc"]["initX"];
							this["levelmc"].y = this["levelmc"]["initY"];	
						}
						if (movingobstacle_mc)
						{						
							movingobstacle_mc.gotoAndPlay(2);
						}
						var movingobstacle2 = obstacle_mc.getChildByName("movingobstacle2") as MovieClip;
						if (movingobstacle2)
						{
							movingobstacle2.gotoAndPlay(2);
						}
						var movingobstacle3 = obstacle_mc.getChildByName("movingobstacle3") as MovieClip;
						if (movingobstacle3)
						{
							
							movingobstacle3.gotoAndPlay(2);
						}
						var movingobstacle4 = obstacle_mc.getChildByName("movingobstacle4") as MovieClip;
						if (movingobstacle4)
						{
							movingobstacle4.gotoAndPlay(2);
						}
						
						soundchannel = rbEngineStarting.play();
						soundchannel.addEventListener(Event.SOUND_COMPLETE, onEngineStartedSoundPlayed);
						gamepaused = false;
					}
					
					
				}
				if (congratsmc.currentFrame == congratsmc.totalFrames - 1)
				{					
					
					bike.max_speed = bikemaxspeed;
					var nextLevelName:String = levelNameArray[currentLevel + 1];
					this.gotoAndStop(nextLevelName);
					changeBike(nextLevelName);
					//var pos:Point = bikeposArray[currentLevel + 1];
					//bike.changePos(pos.x, pos.y);
					//bike.rotation = bikeRotArray[currentLevel + 1];
					currentLevel++;
					txtRemTime.text = "5:00" ;
					gameTimer.start();
					timeElapsed = 0;
					//bike.bikepaused = false;
					if (currentLevel >= 4)
					{
						this["levelmc"]["initX"] = this["levelmc"].x;
						this["levelmc"]["initY"] = this["levelmc"].y;	
					}
					
					soundchannel = rbEngineStarting.play();
					soundchannel.addEventListener(Event.SOUND_COMPLETE, onEngineStartedSoundPlayed);
					gamepaused = false;
				}
				
				
				
			}
			
		}
		private function spacekeyUpListener(evt:KeyboardEvent)
		{
			if (evt.keyCode == 32)
			{
				gameover_mc.x = -1000;
				gameover_mc.y = -1000;
				hud_mc.visible = true;
				//LOAD FIRST LEVEL
				
				changeBike("level1");
				
				bike["head"] .rotation = 0;
				bike.max_speed = bikemaxspeed;
				bike.bikepaused = false;
				txtRemTime.text = "5:00" ;
				gameTimer.start();
				timeElapsed = 0;
				lifesRemaining = 5;
				soundchannel = rbEngineStarting.play();
				soundchannel.addEventListener(Event.SOUND_COMPLETE, onEngineStartedSoundPlayed);
				gamepaused = false;
				
				stage.removeEventListener(KeyboardEvent.KEY_UP, spacekeyUpListener);	
			}
			
			
		}
		
		function playEngineHighSound(evt:Event)
		{
			
			stopEngineRunningSound();
			
			soundchannel2 = rbEngineHigh.play(80);
			if (restartTimer2)
			{
				if (restartTimer2.hasEventListener(TimerEvent.TIMER_COMPLETE))
				{
					restartTimer2.stop();
					restartTimer2.removeEventListener(TimerEvent.TIMER_COMPLETE, playEngineHighSound);			
				}
			}
			
			restartTimer2 = new Timer(rbEngineHigh.length -100 , 1);			
			restartTimer2.start();			
			restartTimer2.addEventListener(TimerEvent.TIMER_COMPLETE, playEngineHighSound);
		}
		
		function playEngineRunningSound(evt:Event)
		{
			stopEngineHighSound();
			
			soundchannel = rbEngineRunning.play(180);			
			
			if (restartTimer)
			{
				if (restartTimer.hasEventListener(TimerEvent.TIMER_COMPLETE))
				{
					restartTimer.stop();
					restartTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, playEngineRunningSound);
				}
			}
			restartTimer = new Timer(rbEngineRunning.length - 250, 1);			
			restartTimer.start();
			restartTimer.addEventListener(TimerEvent.TIMER_COMPLETE, playEngineRunningSound);
		}
		
		public function stopEngineHighSound()
		{
			soundchannel2.stop();
			if (restartTimer2)
			{
				restartTimer2.stop();			
				if (restartTimer2.hasEventListener(TimerEvent.TIMER_COMPLETE))
				{
					restartTimer2.removeEventListener(TimerEvent.TIMER_COMPLETE, playEngineHighSound);
				}
			}
			
			
			isEngineSoundHigh = false;
		}
		
		public function stopEngineRunningSound()
		{
			soundchannel.stop();
			if (restartTimer)
			{
				restartTimer.stop();			
				if (restartTimer.hasEventListener(TimerEvent.TIMER_COMPLETE))
				{
					restartTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, playEngineRunningSound);
				}
			}
			
		}
    }
}